{"prompt": "clusterrolebinding with kind Group name manager and roleref kind ClusterRole and name test-clusterrole", "completion": "apiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: test-cluster-rolebinding\nsubjects:\n- kind: Group\n  name: manager\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: test-clusterrole\n  apiGroup: rbac.authorization.k8s.io\n---"}
{"prompt": "configmap test-config with data foo=bar", "completion": "apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test-config\n  namespace: default\ndata:\n  foo: bar\n---"}
{"prompt": "cronjob running every minute and image busybox and command args \"date; echo Hello from the Kubernetes cluster\" ", "completion": "apiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: test-cronjob\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: hello\n            image: busybox\n            args:\n            - /bin/sh\n            - -c\n            - date; echo Hello from the Kubernetes cluster\n          restartPolicy: OnFailure\n---"}
{"prompt": "daemonset test-dms having image nginx:latest, imagepullPolicy IfNotPresent and volume varlibdockercontainers with hostpath /var/lib/docker/containers", "completion": "apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: test-dms\n  labels:\n    k8s-app: test-dms\nspec:\n  selector:\n    matchLabels:\n      name: test-dms\n  template:\n    metadata:\n      labels:\n        name: test-dms\n    spec:\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n      containers:\n      - name: test-dms\n        image: nginx:latest\n        imagePullPolicy: IfNotPresent\n        resources:\n          requests:\n            cpu: 100m\n            memory: 200Mi\n          limits:\n            cpu: 300m\n            memory: 400Mi\n        volumeMounts:\n        - name: varlog\n          mountPath: /var/log\n        - name: varlibdockercontainers\n          mountPath: /var/lib/docker/containers\n          readOnly: true\n      terminationGracePeriodSeconds: 30\n      volumes:\n      - name: varlog\n        hostPath:\n          path: /var/log\n      - name: varlibdockercontainers\n        hostPath:\n          path: /var/lib/docker/containers\n---"}
{"prompt": "K8s deployment with 2 replicas and containerPort 80", "completion": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: test-deployment\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: demo\n  template:\n    metadata:\n      labels:\n        app: demo\n    spec:\n      containers:\n      - image: nginx:1.12\n        imagePullPolicy: IfNotPresent\n        name: web\n        ports:\n        - containerPort: 80\n          name: http\n          protocol: TCP\n---\n"}
{"prompt": "hpa having 10 maxReplicas and 1 minReplicas, deployment as scaleTargetRef", "completion": "apiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: test-hpa\nspec:\n  maxReplicas: 10\n  minReplicas: 1\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: test-deployment\n  targetCPUUtilizationPercentage: 50\n---\n"}
{"prompt": "ingress Kubernetes resource to expose test service on /testpath path and 80 port", "completion": "apiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: test-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        backend:\n          serviceName: test\n          servicePort: 80\n---\n"}
{"prompt": "K8s job running \"perl -Mbignum=bpi -wle print bpi(2000)\" command on perl image", "completion": "apiVersion: batch/v1\nkind: Job\nmetadata:\n  name: pi\nspec:\n  template:\n    spec:\n      containers:\n      - name: pi\n        image: perl\n        command: [\"perl\",  \"-Mbignum=bpi\", \"-wle\", \"print bpi(2000)\"]\n      restartPolicy: Never\n  backoffLimit: 4\n---\n"}
{"prompt": "mutatingwebhookconfig to call test.example.com endpoint on deployments and service CREATE operations", "completion": "apiVersion: admissionregistration.k8s.io/v1\nkind: MutatingWebhookConfiguration\nmetadata:\n  name: test-mutating-webhook\n  labels:\n    app: test-mutating-webhook\nwebhooks:\n  - name: test.example.com\n    sideEffects: None\n    admissionReviewVersions: [\"v1beta1\"]\n    clientConfig:\n      service:\n        name: admission-webhook-example-svc\n        namespace: default\n        path: \"/mutate\"\n    rules:\n      - operations: [ \"CREATE\" ]\n        apiGroups: [\"apps\", \"\"]\n        apiVersions: [\"v1\"]\n        resources: [\"deployments\",\"services\"]\n    namespaceSelector:\n      matchLabels:\n        test-mutating-webhook: enabled\n---\n"}
{"prompt": "test namespace", "completion": "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: test\n---\n"}
{"prompt": "K8s netpolicy to allow Ingress and Egress from namespace with labels project: myproject and pod with label role: frontend", "completion": "apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          project: myproject\n    - podSelector:\n        matchLabels:\n          role: frontend\n    ports:\n    - protocol: TCP\n      port: 6379\n---\n"}
{"prompt": "pvc with 10Gi size", "completion": "apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: slow\n---\n"}
{"prompt": "PV with 10Gi size and hostPath /mnt/data", "completion": "\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: test-pv-volume\n  labels:\n    type: local\nspec:\n  storageClassName: manual\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: \"/mnt/data\"\n---\n"}
{"prompt": "psp with RunAsAny rule on seLinux, supplementalGroups, runAsUser, and fsGroup", "completion": "apiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: test-psp\nspec:\n  privileged: false\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  runAsUser:\n    rule: RunAsAny\n  fsGroup:\n    rule: RunAsAny\n---\n"}
{"prompt": "K8s role manifest with rule to allow get, watch and list on pods resource", "completion": "apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: test-role\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n---\n"}
{"prompt": "Secret with username=admin and password=1f2d1e2e67df", "completion": "apiVersion: v1\nkind: Secret\nmetadata:\n  name: test-secret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: MWYyZDFlMmU2N2Rm\n---\n"}
{"prompt": "Service to expose pod with label app: mysql 8080 port and 5000 targetport", "completion": "apiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  labels:\n    app: mysql\nspec:\n  ports:\n    - name: server\n      port: 8080\n      targetPort: 5000\n      protocol: TCP\n  type: ClusterIP\n  selector:\n    app: mysql\n---\n"}
{"prompt": "Statefulset with k8s.gcr.io/nginx-slim:0.8 image 1Gi volume mounted on /usr/share/nginx/html path", "completion": "apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: test-ss\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  serviceName: \"nginx\"\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      terminationGracePeriodSeconds: 10\n      containers:\n      - name: nginx\n        image: k8s.gcr.io/nginx-slim:0.8\n        ports:\n        - containerPort: 80\n          name: web\n        volumeMounts:\n        - name: www\n          mountPath: /usr/share/nginx/html\n  volumeClaimTemplates:\n  - metadata:\n      name: www\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n---\n"}
{"prompt": "storageclass of gp2 type and volumeBindingMode: Immediate", "completion": "apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: test-ss\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - debug\nvolumeBindingMode: Immediate\n---\n"}
